diff --git a/scripts/cocoapods/privacy_manifest_utils.rb b/scripts/cocoapods/privacy_manifest_utils.rb
index 760082954ae53231efceb3eba8a8ecf5f3fb19ec..7fd3d610c1360cdd3c8e8b6e4f10078ea1f1dab0 100644
--- a/scripts/cocoapods/privacy_manifest_utils.rb
+++ b/scripts/cocoapods/privacy_manifest_utils.rb
@@ -21,6 +21,7 @@ module PrivacyManifestUtils
         get_core_accessed_apis.each do |accessed_api|
             api_type = accessed_api["NSPrivacyAccessedAPIType"]
             reasons = accessed_api["NSPrivacyAccessedAPITypeReasons"]
+            next if api_type.nil? || reasons.nil?
             required_reason_apis[api_type] ||= []
             required_reason_apis[api_type] += reasons
         end
@@ -29,6 +30,7 @@ module PrivacyManifestUtils
         (privacy_info["NSPrivacyAccessedAPITypes"] || []).each do |accessed_api|
             api_type = accessed_api["NSPrivacyAccessedAPIType"]
             reasons = accessed_api["NSPrivacyAccessedAPITypeReasons"]
+            next if api_type.nil? || reasons.nil?
             # Add reasons from existing PrivacyInfo file to the ones from pods
             required_reason_apis[api_type] ||= []
             required_reason_apis[api_type] += reasons
@@ -67,7 +69,7 @@ module PrivacyManifestUtils
     end
 
     def self.ensure_reference(file_path, user_project, target)
-        reference_exists = target.resources_build_phase.files_references.any? { |file_ref| file_ref.path.end_with? "PrivacyInfo.xcprivacy" }
+        reference_exists = target.resources_build_phase.files_references.any? { |file_ref| file_ref.path&.end_with? "PrivacyInfo.xcprivacy" }
         unless reference_exists
             # We try to find the main group, but if it doesn't exist, we default to adding the file to the project root â€“ both work
             file_root = user_project.root_object.main_group.children.find { |group|
@@ -79,9 +81,11 @@ module PrivacyManifestUtils
     end
 
     def self.get_privacyinfo_file_path(user_project, targets)
+        puts "Debug: Entering get_privacyinfo_file_path function"
         file_refs = targets.flat_map { |target| target.resources_build_phase.files_references }
-        existing_file = file_refs.find { |file_ref| file_ref.path.end_with? "PrivacyInfo.xcprivacy" }
+        existing_file = file_refs.find { |file_ref| file_ref.path&.end_with? "PrivacyInfo.xcprivacy" }
         if existing_file
+            puts "Debug: Found existing file: #{existing_file.real_path}"
             return existing_file.real_path
         end
 
@@ -90,9 +94,11 @@ module PrivacyManifestUtils
         if info_plist_path.nil?
             # return path that is sibling to .xcodeproj
             path = user_project.path
-            return File.join(File.dirname(path), "PrivacyInfo.xcprivacy")
+            puts "Debug: info_plist_path is nil, using user_project.path: #{path}"
+            return File.join(File.dirname(path), "PrivacyInfo.xcprivacy") unless path.nil?
         end
-        return File.join(File.dirname(info_plist_path.real_path),"PrivacyInfo.xcprivacy")
+        puts "Debug: Found info_plist_path: #{info_plist_path.real_path}"
+        return File.join(File.dirname(info_plist_path.real_path),"PrivacyInfo.xcprivacy") unless info_plist_path.real_path.nil?
     end
 
     def self.get_used_required_reason_apis(installer)
@@ -111,6 +117,7 @@ module PrivacyManifestUtils
                     accessed_api_types.each do |accessed_api|
                     api_type = accessed_api["NSPrivacyAccessedAPIType"]
                     reasons = accessed_api["NSPrivacyAccessedAPITypeReasons"]
+                    next if api_type.nil? || reasons.nil?
                     used_apis[api_type] ||= []
                     used_apis[api_type] += reasons
                     end
